POST /_scripts/CalcEntropy
{
  "script" : {
      "lang": "painless",
      "source": """
      /*calculate the total entropy (information content), symbol entropy and normalized entropy (randomness essentially) of a 
      field named calcentropy. To use this script, create that field with set and remove it after with remove. */
      String fieldStr=ctx.CalcEntropy;
      if (fieldStr!=null&&fieldStr!=""){
        def length=fieldStr.length();
        
        char[] fieldArr;
        fieldArr=fieldStr.toCharArray();
    
        //genereate a hash map of unique characters in the string
        Map Counts= new HashMap();
        char c;
        for (int i=0;i<length;i++)
        {
        c=fieldArr[i];
        if (Counts.containsKey(c)){
          Counts.put(c, Counts.get(c)+1);
        }
        else {
          Counts.put(c,1);
        }
        }
        
        def uniqueCs=Counts.keySet().toArray();
        double dlength=length;
        if (uniqueCs.length>1) {
          //calculate the entropy of the symbol set. This is the average number of bits it would take to represent each symbol under optimal compression.
          double entropy=0;
          for (int i=0;i<uniqueCs.length;i++){
            char currentChar=uniqueCs[i];
            double p=Counts.get(currentChar)/dlength;
            double logp=Math.log(p);
            double pent=p*logp;
            entropy=entropy-pent;
          }
          
          //calculate the normalized entropy of the symbolset
          double normEntropy=entropy/Math.log(uniqueCs.length);
          
          //store the result in new fields 
          //entropy of the field. High total entropy indicates large amount of data.
          ctx.TotalEntropy=entropy*length;
  
          //average symbol entropy. Goes up with randomness (including set size). Measured in nats. High values indicate encoding.
          ctx.SymbolEntropy=entropy;
          //normalized entropy - randomness of character set, ignoring number of symbols. Measured in bits equivalent for a base the size of the symbol set. Values close to 1 indicate true random data (e.g. encryption/compression)
          ctx.NormalizedEntropy=normEntropy;
        }
        
      }
      """
  }

}
