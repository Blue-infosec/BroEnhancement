POST /_scripts/CalcEntropy
{
  "script" : {
      "lang": "painless",
      "source": """
      //if subdomain exists, calculate it's entropy. Else if uri exists, calculate its entropy. Else do nothing.
      String fieldStr=ctx.CalcEntropy;
      if (fieldStr!=null&&fieldStr!=""){
        def length=fieldStr.length();
        
        char[] fieldArr;
        fieldArr=fieldStr.toCharArray();
    
        //genereate a hash map of unique characters in the string
        Map Counts= new HashMap();
        char c;
        for (int i=0;i<length;i++)
        {
        c=fieldArr[i];
        if (Counts.containsKey(c)){
          Counts.put(c, Counts.get(c)+1);
        }
        else {
          Counts.put(c,1);
        }
        }
        
        //calculate the shannon entropy (naive) based on observed frequency
        double dlength=length;
        double entropy=0;
        for (int i=0;i<length;i++){
          char currentChar=fieldArr[i];
          double p=Counts.get(currentChar)/dlength;
          double logp=Math.log(p)/Math.log(2);
          double pent=p*logp;
          entropy=entropy-pent;
        }
        
        double compression=0;
        def uniqueCs=Counts.keySet().toArray();
        for (int i=0;i<uniqueCs.length;i++){
          char currentChar=uniqueCs[i];
          double p=Counts.get(currentChar)/dlength;
          double logp=Math.log(p)/Math.log(2);
          double pent=p*logp;
          compression=compression-pent;
        }
        
        //store the result in the new field ReqEntropy
        ctx.ReqEntropy=entropy;
        ctx.EntropyPerChar=entropy/length;
        ctx.CompEntropy=compression;
        ctx.outputtest=fieldStr;
      }
      """
  }

}
